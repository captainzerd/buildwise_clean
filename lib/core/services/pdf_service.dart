// lib/core/services/pdf_service.dart
import 'dart:typed_data';
import 'package:intl/intl.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;

import '../models/estimate.dart';

class PdfService {
  const PdfService();

  Future<Uint8List> buildEstimatePdf(Estimate e) async {
    final doc = pw.Document();
    final df = NumberFormat.currency(symbol: 'GHâ‚µ', decimalDigits: 2);

    doc.addPage(
      pw.MultiPage(
        build: (ctx) => [
          pw.Header(
            level: 0,
            child: pw.Text(
              'BuildWise Estimate',
              style: pw.TextStyle(fontSize: 22, fontWeight: pw.FontWeight.bold),
            ),
          ),
          pw.Text('Project: ${e.projectName}'),
          pw.Text('Location: ${e.city}, ${e.region}'),
          pw.Text('Area: ${e.squareFootage.toStringAsFixed(0)} sqft'),
          pw.SizedBox(height: 12),
          pw.Text(
            'Phase Breakdown',
            style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
          ),
          pw.SizedBox(height: 6),
          pw.TableHelper.fromTextArray(
            headers: const ['Phase', 'Planned (GHS)'],
            data: e.phasePlanned.entries
                .map((kv) => [kv.key, df.format(kv.value)])
                .toList(),
          ),
          pw.SizedBox(height: 12),
          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
            children: [
              pw.Text(
                'Total Planned:',
                style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
              ),
              pw.Text(
                df.format(e.totalPlanned),
                style: pw.TextStyle(fontWeight: pw.FontWeight.bold),
              ),
            ],
          ),
          pw.SizedBox(height: 24),
          pw.Divider(),
          pw.Text(
            'Generated by BuildWise',
            style: pw.TextStyle(fontSize: 10, color: PdfColors.grey700),
          ),
        ],
      ),
    );

    return doc.save();
  }
}
